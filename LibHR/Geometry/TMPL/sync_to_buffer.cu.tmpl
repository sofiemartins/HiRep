/***************************************************************************\
* Copyright (c) 2023, Sofie Martins                                         *   
* All rights reserved.                                                      * 
\***************************************************************************/

#include "Utils/generics.h"
#include "libhr_core.h"

#if !defined _FIELD_TYPE
#error Missing _FIELD_TYPE in communications_gpu.c
#endif
#if !defined _SITE_TYPE
#error Missing _SITE_TYPE in communications_gpu.c
#endif
#if !defined _FIELD_DIM
#error Missing _FIELD_DIM in communications_gpu.c
#endif

#define _KERNEL(_name, _args) __global__ _FUNC(void, _name, _FIELD_TYPE, _args)
#define _DECLARE(_type, _name, _args) _FUNC(_type, _name, _FIELD_TYPE, _args)

_KERNEL(box_to_buffer_kernel_,
        (_SITE_TYPE * in, _SITE_TYPE *out, coord4 *icoord, int *ipt_gpu, int vol_in, int vol_out, int base_in, int base_out)) {
    for (int id = blockIdx.x * BLOCK_SIZE + threadIdx.x; id < vol_out; id += gridDim.x * blockDim.x) {
        const int ix = id + base_out;
        coord4 c = icoord[ix];
        int iy = ipt_ext_gpu(c.x[0], c.x[1], c.x[2], c.x[3]);
        _SITE_TYPE site;
        for (int comp = 0; comp < _FIELD_DIM; ++comp) {
            read_gpu<_REAL>(0, &site, in, iy, comp, _FIELD_DIM);
            write_gpu<_REAL>(0, &site, out, ix, comp, _FIELD_DIM);
        }
    }
}

_DECLARE(void, sync_box_to_buffer_gpu_, (geometry_descriptor * gd, box_t *box, _FIELD_TYPE *in, void *sendbuf)) {
    const gd_type gd_t = in->type->desc;
    const int max_vol = fmax(boxEvenVolume(box), boxOddVolume(box));
    const int grid = (max_vol - 1) / BLOCK_SIZE + 1;
    _SITE_TYPE *in_offset = in->gpu_ptr - in->type->master_shift;
    _SITE_TYPE *out_offset = (_SITE_TYPE *)sendbuf;

    if (gd_t & EVEN) {
        _F_NAME(box_to_buffer_kernel_, _FIELD_TYPE)<<<grid, BLOCK_SIZE>>>(in_offset, out_offset, sb_icoord_gpu, ipt_gpu,
                                                                          boxEvenVolume(geometryBoxes), boxEvenVolume(box),
                                                                          geometryBoxes->base_index, box->base_index);
        CudaCheckError();
    }

    if (gd_t & ODD) {
        _F_NAME(box_to_buffer_kernel_, _FIELD_TYPE)<<<grid, BLOCK_SIZE>>>(in_offset, out_offset, sb_icoord_gpu, ipt_gpu,
                                                                          boxOddVolume(geometryBoxes), boxOddVolume(box),
                                                                          geometryBoxes->base_index_odd, box->base_index_odd);
        CudaCheckError();
    }
}

#undef _DECLARE
#undef _KERNEL

#undef _FIELD_TYPE
#undef _SITE_TYPE
#undef _FIELD_DIM
#undef _GEOM_TYPE
#undef _COMPLEX
#undef _REAL